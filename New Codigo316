#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main(){
int pid;
pid = fork();
if (pid > 0){
printf("Soy el proceso padre y espero 60 segundos antes de terminar, de mi hijo no se nada.\n");
sleep (60);
}
else {exit (0);
}
return 0;}

Aqui va el otro

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int pid;
    pid = fork();

    if (pid > 0) {
        printf("Soy el proceso padre. Espero a mi hijo...\n");
        wait(NULL);  // Espera al hijo, evita que quede zombie
        sleep(60);   // Solo para observar que ya no hay zombie
        printf("Mi hijo terminó. El padre también termina.\n");
    } else {
        printf("Soy el proceso hijo. Termino inmediatamente.\n");
        exit(0);
    }
    return 0;
}

Excec


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        printf("Soy el hijo y voy a listar los procesos con execl:\n");
        execl("/bin/ps", "ps", "aux", NULL);
        perror("execl");
        exit(1);
    } else if (pid > 0) {
        wait(NULL);
        printf("El hijo terminó de listar los procesos.\n");
    } else {
        perror("fork");
        return 1;
    }
    return 0;
}

Funcion System

#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("Listando los procesos del sistema usando system():\n");
    system("ps aux");
    printf("Comando ejecutado con system() finalizado.\n");

    return 0;
}
